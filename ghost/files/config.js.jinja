// # Ghost Configuration
// # Managed by Salt, do not edit by hand.

{#- This template expects "blog" and "port" to be passed as context. #}

{%- set pget = salt['pillar.get'] %}
{%- set defaultconf = pget('ghost:conf:default', {}) %}
{%- set blogconf = pget('ghost:conf:' + blog, {}) %}

var path = require('path'),
    config;

{#- This ugly mess takes a default specifying only the minimal options,
    merges the pillar dict at ghost:conf:default into it, and then merges
    the one at ghost:conf:<blogname>. Essentially anything here can be
    overridden in pillar if you want. #}
    
function MergeRecursive(obj1, obj2) {

  for (var p in obj2) {
    try {
      // Property in destination object set; update its value.
      if ( obj2[p].constructor==Object ) {
        obj1[p] = MergeRecursive(obj1[p], obj2[p]);

      } else {
        obj1[p] = obj2[p];

      }

    } catch(e) {
      // Property in destination object not set; create it and set its value.
      obj1[p] = obj2[p];

    }
  }

  return obj1;
}

config = {
  production: MergeRecursive(MergeRecursive({
    url: "http://{{ blog }}",
    mail: {},
    database: {
      client: 'sqlite3',
      connection: {
        filename: path.join(__dirname, '/content/data/ghost.db')
      },
      debug: false
    },
    server: {
      host: '127.0.0.1',
      port: '{{ port }}'
    }
  }, {{ defaultconf|json }}), {{ blogconf|json }}),
    
  development: MergeRecursive(MergeRecursive({
    url: "http://localhost:{{ port }}",
    database: {
      client: 'sqlite3',
      connection: {
        filename: path.join(__dirname, '/content/data/ghost.db')
      },
      debug: false
    },
    server: {
      host: '127.0.0.1',
      port: '{{ port }}'
    },
    paths: {
      contentPath: path.join(__dirname, '/content/')
    }
  }, {{ defaultconf|json }}), {{ blogconf|json }})
};

module.exports = config;
